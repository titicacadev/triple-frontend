name: CI
on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

env:
  # Node.js
  NODE_VERSION: '16.x'
  NPM_REGISTRY_URL: 'https://registry.npmjs.org'
  # Slack Notifications
  SLACK_WEBHOOK: ${{ secrets.GHA_NOTIFICATIONS_WEBHOOK_URL }}
  SLACK_CHANNEL: '#triple-web-dev-notifications' # 메시지 보낼 채널
  SLACK_USERNAME: 'Triple Frontend' # 메시지를 보내는 계정 이름
  SLACK_ICON_EMOJI: ':triple_new:'
  SLACK_DETAIL_URL: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
  SLACK_GITHUB_REPOSITORY: ${{ github.repository }}
  SLACK_AUTHOR_NAME: ${{ github.event.sender.login }}
  SLACK_AUTHOR_ICON: ${{ github.event.sender.avatar_url }}
  SLACK_FOOTER: ${{ github.repository }}
  SLACK_GITHUB_REF: ${{ github.event.ref }} # 메시지에 ref로 표시되는 값
  SLACK_GITHUB_EVENT_NAME: ${{ github.event_name }} # 메시지에 Event로 표시되는 값

jobs:
  check-dependencies:
    runs-on: ubuntu-latest

    steps:
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.NPM_REGISTRY_URL }}

      - uses: actions/checkout@v2

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-

      - run: npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READ_ONLY_NPM_TOKEN }}

      - name: Check working tree clean
        id: check-working-tree
        run: |
          DIFF=$(git diff)
          echo "::set-output name=clean::$([ -z $DIFF ] && echo 'true')"

      - name: Notify checking dependency failure
        if: steps.check-working-tree.outputs.clean != 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READ_ONLY_NPM_TOKEN }}
          SLACK_COLOR: fail
          SLACK_TITLE: ':pleading: Deps check FAILURE'
          SLACK_TOPIC: '의존성 변경이 있습니다. `npm run sync-deps`로 변경을 반영해주세요.'
        run: npx @titicaca/gha-tools notify

      - name: Shutdown workflow
        if: steps.check-working-tree.outputs.clean != 'true'
        run: node -e 'process.exit(1)'

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.NPM_REGISTRY_URL }}

      - name: Notify build start to slack
        env:
          SLACK_TITLE: ':rocket: Build Started'
          NODE_AUTH_TOKEN: ${{ secrets.READ_ONLY_NPM_TOKEN }}
        run: |
          npx @titicaca/gha-tools notify

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-

      - name: Install dependencies
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READ_ONLY_NPM_TOKEN }}
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Build
        run: npm run build

      - name: Notify build success to slack
        if: success()
        env:
          SLACK_TITLE: ':tada: Build Succeed'
          SLACK_COLOR: success
          NODE_AUTH_TOKEN: ${{ secrets.READ_ONLY_NPM_TOKEN }}
        run: |
          npx @titicaca/gha-tools notify

      - name: Notify build fail to slack
        if: failure()
        env:
          SLACK_TITLE: ':pleading: Build Failed'
          SLACK_COLOR: fail
          NODE_AUTH_TOKEN: ${{ secrets.READ_ONLY_NPM_TOKEN }}
        run: |
          npx @titicaca/gha-tools notify

  chromatic-deployment:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.NPM_REGISTRY_URL }}

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-

      - run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READ_ONLY_NPM_TOKEN }}

      - name: Build
        run: npm run build

      - name: Publish to Chromatic
        if: github.ref != 'refs/heads/main'
        uses: chromaui/action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          buildScriptName: build
          workingDir: docs

      - name: Publish to Chromatic and auto accept changes
        if: github.ref == 'refs/heads/main'
        uses: chromaui/action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          buildScriptName: build
          workingDir: docs
          autoAcceptChanges: true

  upload-coverage:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.NPM_REGISTRY_URL }}

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-

      - run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READ_ONLY_NPM_TOKEN }}

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
