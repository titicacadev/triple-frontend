name: CD

on:
  push:
    branches-ignore:
      - '**'
    tags:
      - 'release-prod-*'

jobs:
  release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [15.x]

    env:
      SLACK_CHANNEL: '#triple-web-dev-notifications'
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      SLACK_USERNAME: 'Triple Frontend'
      SLACK_ICON_EMOJI: ':triple_new:'
      SLACK_COLOR: gray
      SLACK_FOOTER: 'Triple Frontend'
      SLACK_TOPIC:
      SLACK_AUTHOR_NAME: ${{ github.event.sender.login }}
      SLACK_AUTHOR_ICON: '${{ github.event.sender.avatar_url }}'
      SLACK_GITHUB_REF: '${{ github.event.ref }}'
      SLACK_GITHUB_EVENT_NAME: '${{ github.event_name }}'
      SLACK_GITHUB_REPOSITORY: ${{ github.repository }}
      SLACK_DETAIL_URL: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'

    steps:
      - uses: actions/checkout@v2-beta

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org'

      - name: Define variables
        run: |
          VERSION="v$(cat ./lerna.json | jq -r '.version')"
          echo "DEPLOY_VERSION=$VERSION" >> GITHUB_ENV
          echo "SLACK_TOPIC=$VERSION" >> GITHUB_ENV

      - name: Notify build start to slack
        env:
          SLACK_TITLE: ':rocket: Build Started'
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npx @titicaca/gha-tools notify

      - name: Build
        run: |
          npm ci
          npm run build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Notify build success to slack
        if: success()
        env:
          SLACK_TITLE: ':tada: Build Succeed'
          SLACK_COLOR: success
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npx @titicaca/gha-tools notify

      - name: Notify build fail to slack
        if: failure()
        env:
          SLACK_TITLE: ':pleading: Build Failed'
          SLACK_COLOR: fail
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npx @titicaca/gha-tools notify

      - name: Notify deploy start to slack
        env:
          SLACK_TITLE: ':rocket: Deploy Started'
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npx @titicaca/gha-tools notify

      - name: Release
        run: |
          git stash
          npx lerna publish from-package --yes
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Notify deploy success to slack
        if: success()
        env:
          SLACK_TITLE: ':tada: Deploy Succeed'
          SLACK_COLOR: success
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npx @titicaca/gha-tools notify

      - name: Notify deploy fail to slack
        if: failure()
        env:
          SLACK_TITLE: ':pleading: Deploy Failed'
          SLACK_COLOR: fail
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npx @titicaca/gha-tools notify

  tag:
    needs: release
    if: success()
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [15.x]

    steps:
      - uses: actions/checkout@v2-beta

      - name: Setup Node.js
        uses: actions/setup-node@v1

      - name: Tag with annotation
        run: |
          VERSION="v$(cat ./lerna.json | jq -r '.version')"

          curl -f --request POST --url https://api.github.com/repos/${{ github.repository }}/git/tags \
            -H 'Authorization: token ${{ secrets.GHA_TOKEN }}' \
            -H 'Content-Type: application/json' \
            -d "{\"tag\":\"${VERSION}\",\"message\":\"${VERSION}\",\"object\":\"${GITHUB_SHA}\",\"type\":\"commit\"}" > tag.json

          TAG_SHA="$(node -p -e 'require(`./tag.json`).sha')"

          curl -s -o /dev/null -I -w "%{http_code}" \
            --url https://api.github.com/repos/${{ github.repository }}/git/refs/tags/${VERSION} \
            -H 'Authorization: token ${{ secrets.GHA_TOKEN }}' > status

          if [[ `cat status` == "200" ]]; then
            curl -f --request PATCH --url https://api.github.com/repos/${{ github.repository }}/git/refs/tags/${VERSION} \
              -H 'Authorization: token ${{ secrets.GHA_TOKEN }}' \
              -H 'Content-Type: application/json' \
              -d "{\"force\":true,\"sha\":\"${TAG_SHA}\"}"
          else
            curl -f --request POST --url https://api.github.com/repos/${{ github.repository }}/git/refs \
              -H 'Authorization: token ${{ secrets.GHA_TOKEN }}' \
              -H 'Content-Type: application/json' \
              -d "{\"ref\":\"refs/tags/${VERSION}\",\"sha\":\"${TAG_SHA}\"}"
          fi
